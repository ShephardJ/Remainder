<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_airship_main_fight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!audio_group_is_loaded(airship_audio))audio_group_load(airship_audio);
image_xscale=13;
image_yscale=image_xscale;
image_speed=0;

blade=-5;

//create the 3 hatches
var parts=3
do
{
    parts-=1;
    hatch_array[parts]=(instance_create(x,y,obj_airship_hatch))
    hatch_state_array[parts]=1
    hatch_array[parts].varient=parts;
}
until parts=0;

var parts=3
do
{
    parts-=1;
    skeleton_array[parts]=0;
}
until parts=0;
          
destroy=0;  

global.wait_for_reposition=0;
global.repositioned=1;
global.enemie_total=1;
player_move_forward=0;
moved_forward=0;

//phases
stunned=0;
stunned_count=0;
stunned_count_1=0;
stunned_count_2=0;
stunned_count_3=0;
death_sequence=3;
current_player_wait_wait_array=14;
obj_overlay_test.player_wait_wait_array[current_player_wait_wait_array]=1;

//fight sequence
fight_phase=1;
fight_state=0;
fight_state_current=-1;
state_switching=0;
acted=0;
cannon_balls_acting=0;
bob=0;
start_turn=1;

//var_reset
var_reset=0;

//cannon
var parts=3
do
{
    parts-=1;
    cannon_array[parts]=(instance_create(x,y,obj_airship_cannon))
}
until parts=0;
cannon_balls_move=0;
zap_hatch=-1


//stats
init_hp=80;
hp=80;
slash_resistence=1;
pierce_resistence=1;
fire_resistance=1;
ice_resistance=1.5;
poison_resistance=1.5;
push_resistance=1;

//taking damage var
hit=0;
damage_taken_type_1=0;
damage_taken_1=0;
damage_taken_type_2=0;
damage_taken_2=0;
waiting=0;
pushed=0;
hit_count=0;
global.player_wait_wait=1;

engin_sound=audio_play_sound(snd_engin,5,true)
audio_sound_gain(engin_sound,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


obj_overlay_test.player_wait_wait_array[current_player_wait_wait_array]=0;
current_player_wait_wait_array=0







if (audio_group_is_loaded(airship_audio))audio_group_unload(airship_audio);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///take damage
if (hit=1)&amp;&amp;(global.attack_fx&gt;0)&amp;&amp;(waiting=0)||(pushed=1)
{
    d_taken=scr_enemy_take_damage(damage_taken_type_1,damage_taken_1,damage_taken_type_2,damage_taken_2,pierce_resistence,slash_resistence,fire_resistance,ice_resistance,poison_resistance,push_resistance);
    scr_show_damage(d_taken,damage_taken_type_1);
    //set pause
    waiting=1;
    hit=0;
    hit_count+=1;
    lizard_hit_sound=audio_play_sound(snd_lizard_hit,5,false);
    audio_sound_gain(lizard_hit_sound,global.vol_fx*0.75,0);
    //damage reset
    damage_taken_type_1=0;damage_taken_1=0;amage_taken_type_2=0;damage_taken_2=0;
}
/////////////////////////////////////////////////////////////////////////////////////////////
//can be hit again if no attack fx on screen
if (global.attack_fx=0) {waiting=0;hit=0}
/////////////////////////////////////////////////////////////////////////////////////////////
//destroy if hp&lt;0
if (hp&lt;=0) ||(hit_count=13)

{
        if (death_sequence=3)&amp;&amp;(!instance_exists(obj_exploding_parts))heart.destroy=2;
        if (death_sequence=2)&amp;&amp;(!instance_exists(obj_exploding_parts)){part_array[0].destroy=1;part_array[2].destroy=1;}
        if (death_sequence=1)&amp;&amp;(!instance_exists(obj_exploding_parts)){part_array[1].destroy=1;}
        if (death_sequence=0)&amp;&amp;(!instance_exists(obj_exploding_parts))instance_destroy();
        global.player_wait_wait=1;
        obj_overlay_test.current_player_combat_state=player_combat_state.waiting;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset pushed

if pushed=1 pushed=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set phase

if fight_phase=1&amp;&amp; global.enemy_turn=1&amp;&amp;acted=0&amp;&amp;(current_player_wait_wait_array=global.enemy_countdown)&amp;&amp;(global.player_wait_wait=1)
{
    // pause for action
    global.enemy_acting=1;
    var_reset=1;
    
    //ship comes down
    if fight_state=0
    {
        if !(fight_state_current=fight_state)
        {
            //ship flys down
            y+=3;
            if y&gt;=0{y=0;fight_state_current=fight_state;}        
        }
        else
        {
            //open hatch /set zap hatch and bring out cannons
            scr_airship_open_hatch()
        }
    }
    
    
    if fight_state=1
    {
        
            
            scr_airship_firing()
        
    }
    
    if fight_state=2
    {
         if !(fight_state_current=fight_state)
        {
           if (hatch_array[0].acting=0)&amp;&amp;(hatch_array[1].acting=0)&amp;&amp;(hatch_array[2].acting=0)
            {
                scr_airship_shut_hatch()
            }       
        }
        else
        {
            //ship flies up
            y-=3
            if y&lt;=-600
            {
                y=-600;fight_state=0;
                fight_phase=1;
                if !(cannon_array[0].state=0)cannon_array[0].attack_bank=irandom_range(0,2);
                if !(cannon_array[1].state=0)cannon_array[1].attack_bank=irandom_range(0,2);
                if !(cannon_array[2].state=0)cannon_array[2].attack_bank=irandom_range(0,2);
            } 
        }
    }
}

if (fight_phase=2)&amp;&amp;(current_player_wait_wait_array=global.enemy_countdown)&amp;&amp;(global.player_wait_wait=1)
{
    // pause for action
    global.enemy_acting=1;
    //go up
    if fight_state=1
    {
        //ship flies up
        y-=3
        if y&lt;=-600
        {
            y=-600;
            image_index=1;
            
            skeleton_array[0]=instance_create(x+1080/2-156/2,y+300,obj_airship_crew);
            skeleton_array[0].varient=0;
            skeleton_array[1]=instance_create(x+1080/2+150-156/2,y+200,obj_airship_crew);
            skeleton_array[1].varient=1;
            skeleton_array[2]=instance_create(x+1080/2-150-156/2,y+200,obj_airship_crew);
            skeleton_array[2].varient=2;
            hatch_array[0].sprite_index=spr_empty;
            hatch_array[1].sprite_index=spr_empty;
            hatch_array[2].sprite_index=spr_empty;
            hatch_array[0].off=1;
            hatch_array[1].off=1;
            hatch_array[2].off=1;
            fight_state_current=fight_state;
            fight_state=2;
            fight_phase=2;
            attack_bank=irandom_range(0,2);
            attack_bank=irandom_range(0,2);
            attack_bank=irandom_range(0,2);
            blade=instance_create(x,y,obj_airship_blade);
            
            
        }
    }
    if fight_state=2
    {
        if !(fight_state_current=fight_state)
        {
            //ship flies down
            y+=2
            skeleton_array[0].y+=2;
            skeleton_array[1].y+=2;
            skeleton_array[2].y+=2;
            skeleton_array[0].varient=0;
            skeleton_array[1].varient=1;
            skeleton_array[2].varient=2;
            if y&gt;=0
            {
                instance_create(x,y,obj_flash);
                explosion_sound=audio_play_sound(snd_airship_explosion,5,false)
                audio_sound_gain(explosion_sound,global.vol_fx*0.7,0);
                if instance_exists(obj_airship_cannon_ball)obj_airship_cannon_ball.destroy=1;
                audio_stop_sound(engin_sound);
                y=0;
                sprite_index=spr_empty;
                fight_state_current=fight_state;
                skeleton_array[0].x=476;
                skeleton_array[0].y=271;
                skeleton_array[0].on=1;
                skeleton_array[1].x=796;
                skeleton_array[1].y=512;
                skeleton_array[1].on=1;
                skeleton_array[2].x=155;
                skeleton_array[2].y=512;
                skeleton_array[2].on=1;
                global.enemy_acting=0;
                
                if extra_money=1  global.gold+=25;
                blade.destroy=1;
                blade=-5;
            }
        }
        else
        {
            global.enemy_acting=0; 
        }
        
    }
}

if blade&gt;0 
{
    blade.x=x;
    blade.y=y;
}

if global.enemy_turn=0&amp;&amp;var_reset=1
{
    //reset cannon
    global.player_wait_wait=1;
    acted=0;
    cannon_array[0].acted=0;
    cannon_array[1].acted=0;
    cannon_array[2].acted=0;
    cannon_array[0].acting=0;
    cannon_array[1].acting=0;
    cannon_array[2].acting=0;
    hatch_array[0].acted=0;
    hatch_array[1].acted=0;
    hatch_array[2].acted=0;
    hatch_array[0].acting=0;
    hatch_array[1].acting=0;
    hatch_array[2].acting=0;
    cannon_balls_move=1;
    start_turn=1;
    var_reset=0
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch to phase 2 &amp;&amp; destroy &amp;&amp; zapping
if (fight_state=1)&amp;&amp;(hatch_array[0].current_state=0)&amp;&amp;(hatch_array[1].current_state=0)&amp;&amp;(hatch_array[2].current_state=0)
{
    fight_phase=2;
    fight_state=1;
    global.player_AP_current=0;
}

if (fight_phase=2)&amp;&amp;(fight_state=2)&amp;&amp;!(instance_exists(obj_airship_crew))
{
    destroy=1;
}

//zapping 
if fight_state=1&amp;&amp;fight_phase=1
{
if (cannon_array[zap_hatch].zapped=1)||(cannon_array[zap_hatch].current_state=0)&amp;&amp;(((cannon_array[0].shot_out&gt;4)&amp;&amp;(cannon_array[1].shot_out&gt;4))||((cannon_array[0].shot_out&gt;4)&amp;&amp;(cannon_array[2].shot_out&gt;4))||((cannon_array[2].shot_out&gt;4)&amp;&amp;(cannon_array[1].shot_out&gt;4)))
{
    if !(hatch_array[0].state=0)||!(hatch_array[1].state=0)||!(hatch_array[2].state=0)
    { 
        fight_state=2;
        cannon_array[zap_hatch].zapped=0;
        cannon_array[zap_hatch].zapping=0;
        cannon_array[0].times_shot=0;
        cannon_array[0].shot_out=0;
        cannon_array[0].attack_bank=0;
        cannon_array[1].times_shot=0;
        cannon_array[1].shot_out=0;
        cannon_array[1].attack_bank=0;
        cannon_array[2].times_shot=0;
        cannon_array[2].shot_out=0;
        cannon_array[2].attack_bank=0;
        
        
    }
}
}
cannon_total=0;
if hatch_state_array[0]&gt;0 cannon_total+=1;
if hatch_state_array[1]&gt;0 cannon_total+=1;
if hatch_state_array[2]&gt;0 cannon_total+=1;

if destroy=1
{
    if instance_exists(obj_airship_hatch)&amp;&amp;instance_exists(obj_airship_cannon)
    {
        var parts=3
        do
        {
            parts-=1;
            hatch_array[parts].destroy=1;
            cannon_array[parts].destroy=1;
        }       
        until parts=0;
    }
    else instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move cannon and hatch and bob up and down

if (fight_phase=1)&amp;&amp;(fight_state=1)
{
    bob+=0.05
    y+=sin(bob)/25;
}
if destroy=0
{
var parts_move=3
do
{
    parts_move-=1;
    hatch_array[parts_move].x=119+320*parts_move;
    cannon_array[parts_move].x=145+320*parts_move;
    hatch_array[parts_move].y=y+293;
    cannon_array[parts_move].y=y+295;
    if cannon_array[parts_move].state=0
    {
        hatch_array[parts_move].state=0;
        hatch_state_array[parts_move]=0;
    }
}

until parts_move=0;
}
//start_engin
if !(audio_is_playing(snd_engin))&amp;&amp;audio_group_is_loaded(airship_audio)&amp;&amp;fight_phase=1&amp;&amp;fight_state=0
{
    engin_sound=audio_play_sound(snd_engin,5,true)
    audio_sound_gain(engin_sound,0,0);
}
//change engin volume based on distance
audio_sound_gain(engin_sound,global.vol_fx*0.75*((600-abs(y)+50)/600),0);
audio_sound_pitch(engin_sound,0.75*((600-abs(y)+50)/600));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
