<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemie_attack_melee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.enemie_attack_count+=1;
//get vars from enemie
attack_type=10;color_var=-1;color_var_get=-1;damage_1=0;damage_type_1=0;damage_2=0;damage_type_2=0;
if (place_meeting(x,y,all))
{
    enemie=instance_place(x,y,all); 
    attack_type=enemie.attack_type; 
    color_var_get=enemie.damage_type_1; 
    damage_1=enemie.damage_1;
    damage_type_1=enemie.damage_type_1;
    damage_2=enemie.damage_2;
    damage_type_2=enemie.damage_type_2;
    audio_hit_player=enemie.audio_hit_player;
}
//stage vars and setting_color
start_up=1;
destination=0;
player_hit=0;
if (color_var_get=2)||(color_var_get=3)||(color_var_get=4)color_var=color_var_get+3;
//make colors
grey_l=make_colour_rgb(244,244,244);
brown_l=make_colour_rgb(181,103,26);
yellow_l=make_colour_rgb(179,179,30);
red_l=make_colour_rgb(179,0,0);
blue_l=make_colour_rgb(27,179,179);
bronze_l=make_colour_rgb(217,108,35);
green_l=make_colour_rgb(30,179,30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.enemie_attack_count-=1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//color_blend
if (color_var&gt;0)
{
    scr_color_blend();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite and destroy
//melee
if (start_up=1)&amp;&amp;(attack_type=0)
{
    sprite_index=spr_enemie_attack_melee;
    image_xscale=13;
    image_yscale=image_xscale;
    if damage_type_1=1
    {
        
        image_angle=90;
        image_xscale=-13;
    }
    start_up=0;
}

if (image_index&gt;12)&amp;&amp;(player_hit=0)&amp;&amp;(attack_type=0)
{
    obj_overlay_test.damage_taken_1=damage_1;
    obj_overlay_test.player_damage_taken_type_1=damage_type_1;
    obj_overlay_test.damage_taken_2=damage_2;
    obj_overlay_test.player_damage_taken_type_2=damage_type_2;
    obj_overlay_test.audio_player_hit=audio_hit_player;
    player_hit=1;
}
if (image_index&gt;22)&amp;&amp;(attack_type=0) instance_destroy();
//spit
if (start_up=1)&amp;&amp;(attack_type=1)
{
    sprite_index=spr_enemie_attack_spit;
    image_xscale=13;
    image_yscale=image_xscale;
    image_speed=12/120
    vspeed=14;
    start_up=0;
}
if (y&gt;1335)&amp;&amp;(attack_type=1)&amp;&amp;(destination=0)
{
    sprite_index=spr_enemie_attack_spit_hit;
    image_xscale=13;
    image_yscale=image_xscale;
    image_speed=12/120
    vspeed=0;
    obj_overlay_test.damage_taken_1=damage_1;
    obj_overlay_test.player_damage_taken_type_1=damage_type_1;
    obj_overlay_test.damage_taken_2=damage_2;
    obj_overlay_test.player_damage_taken_type_2=damage_type_2;
    obj_overlay_test.audio_player_hit=audio_hit_player;
    destination=1;
}
if (attack_type=1)&amp;&amp;(destination=1)&amp;&amp;(image_index&gt;6)
{
    instance_destroy();
}


if (start_up=1)&amp;&amp;(attack_type=2)
{
    sprite_index=spr_enemie_attack_physical_2;
    image_xscale=13;
    image_yscale=image_xscale;
    image_speed=15/60;
    start_up=0;
}

if (image_index&gt;5)&amp;&amp;(player_hit=0)&amp;&amp;(attack_type=2)
{
    obj_overlay_test.damage_taken_1=damage_1;
    obj_overlay_test.player_damage_taken_type_1=damage_type_1;
    obj_overlay_test.damage_taken_2=damage_2;
    obj_overlay_test.player_damage_taken_type_2=damage_type_2;
    obj_overlay_test.audio_player_hit=audio_hit_player;
    player_hit=1;
}

if (image_index&gt;15)&amp;&amp;(attack_type=2) instance_destroy();

if (start_up=1)&amp;&amp;(attack_type=3)
{
    sprite_index=spr_spider_bite;
    image_xscale=13;
    image_yscale=image_xscale;
    image_speed=15/60;
    start_up=0;
}

if (image_index&gt;3)&amp;&amp;(player_hit=0)&amp;&amp;(attack_type=3)
{
    obj_overlay_test.damage_taken_1=damage_1;
    obj_overlay_test.player_damage_taken_type_1=damage_type_1;
    obj_overlay_test.damage_taken_2=damage_2;
    obj_overlay_test.player_damage_taken_type_2=damage_type_2;
    obj_overlay_test.audio_player_hit=audio_hit_player;
    player_hit=1;
}

if (image_index&gt;8)&amp;&amp;(attack_type=3) instance_destroy();

//
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
