<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-95</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_empty</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale=7.8;
image_yscale=image_xscale;

music=instance_create(x-7.8*58,y+7.8*6,obj_menu_slider);
music.type=0;
sfx=instance_create(x-7.8*58,y+7.8*30,obj_menu_slider);
sfx.type=1;
help=instance_create(1080/2,1920/2,obj_help);
swipe1=instance_create(2*7.8,140*7.8-8,obj_swipe);
swipe1.sprite_index=spr_player_choices_core;
swipe2=instance_create(2*7.8,140*7.8-8,obj_swipe);
swipe2.sprite_index=player_choices_left_right_loop;
swipe3=instance_create(112*7.8,140*7.8-8,obj_swipe);
swipe3.sprite_index=spr_player_choices_core;
swipe4=instance_create(112*7.8,140*7.8-8,obj_swipe);
swipe4.sprite_index=player_choices_left_right_loop;

initialx=0;
initialy=0;
finalx=0;
finaly=0;
destroy=0;
touch_direction=0;

info=0;
info_array=global.current_world;
n=25*7.8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if destroy=0
{
    //get player input
    touch_type=scr_get_input();
    //////////////////////////////////////////////
    //arcade
    if info=0
    {
        if(touch_type=1)
        {   
            instance_create(mouse_x-6*13,mouse_y-6.5*13,obj_tap);
            //go to reset
            if(mouse_x&gt;3*7.8)&amp;&amp;(mouse_x&lt;40*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                if room=arcade_mode {
                    gold_accumulate=round(global.gold_accumulated*(global.difficult*0.25+1));
                    global.progress+=gold_accumulate;
                    global.gold_accumulated=0;
                    scr_save_pro("pro.sav");
                    room_restart();
                }
                else
                {
                    if room=fight_room
                    {
                        global.point_array[global.world_player_point,2]=0;
                        scr_general_save("save.sav");
                        scr_point_save("point.sav");
                        scr_world_save("world.sav");
                        scr_info_save("info.sav");
                        scr_tile_save("tile.sav");
                        scr_save_pro("pro.sav");
                        room_goto(room1);
                    }
                    else
                    {
                        info=1
                    }
                }
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
            }
            // go to end
            if(mouse_x&gt;99*7.8)&amp;&amp;(mouse_x&lt;137*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                if room=arcade_mode {
                    gold_accumulate=round(global.gold_accumulated*(global.difficult*0.25+1));
                    global.progress+=gold_accumulate;
                    global.gold_accumulated=0;
                    scr_save_pro("pro.sav");
                    room_goto(room1);
                }
                else
                {
                    if room=fight_room
                    {
                        global.point_array[global.world_player_point,2]=0;
                        scr_general_save("save.sav");
                        scr_point_save("point.sav");
                        scr_world_save("world.sav");
                        scr_info_save("info.sav");
                        scr_tile_save("tile.sav");
                        scr_save_pro("pro.sav");
                        room_goto(room1);
                    }
                    else
                    {
                        global.next_player_room=room1;
                        obj_world.current_player_state=player_world_state.transition;
                    }
                }
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
            }
            //go to resume
            if(mouse_x&gt;41*7.8)&amp;&amp;(mouse_x&lt;98*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                destroy=1;
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
                scr_options_save("options.sav");
            }
        }
        if global.getting_input=1
        {
        //music
            if music.start_up=0
            {
                if(mouse_x&gt;12*7.8)&amp;&amp;(mouse_x&lt;128*7.8)&amp;&amp;(mouse_y&gt;y-7.8*4)&amp;&amp;(mouse_y&lt;y+7.8*10)
                {
                    music.x=mouse_x;
                    global.vol_music=(((mouse_x/7.8)-12)/128)*0.5;
                    
                } 
            }
            //sfx
            if sfx.start_up=0
            {
                if(mouse_x&gt;12*7.8)&amp;&amp;(mouse_x&lt;128*7.8)&amp;&amp;(mouse_y&gt;y+7.8*23)&amp;&amp;(mouse_y&lt;y+7.8*35)
                {
                    sfx.x=mouse_x;
                    global.vol_fx=(((mouse_x/7.8)-12)/(128-12))*0.66;
                    if global.vol_fx&lt;0.05 global.vol_fx=0;
                    if !audio_is_playing(snd_player_tap)
                    {
                        player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                        audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                        audio_sound_pitch(player_tap_sound,0.925);
                    }
                } 
            }
        }
        if touch_type=2
        {
            if (mouse_y&gt;0)&amp;&amp;(mouse_y&lt;7.8*165)
            {
                if touch_direction=0 help.image_index+=1;
                else help.image_index-=1;
            }
        }
    }
    /////////////////////////////////////////////display info
    else
    {
        if touch_type=1
        {
            instance_create(mouse_x-6*13,mouse_y-6.5*13,obj_tap);
            //go to reset
            if(mouse_x&gt;3*7.8)&amp;&amp;(mouse_x&lt;40*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                info=0;
                
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
            }
            // go to end
            if(mouse_x&gt;99*7.8)&amp;&amp;(mouse_x&lt;137*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                if room=arcade_mode room_goto(room1);
                else
                {
                    if room=fight_room
                    {
                        global.point_array[global.world_player_point,2]=0;
                        scr_general_save("save.sav");
                        scr_point_save("point.sav");
                        scr_world_save("world.sav");
                        scr_info_save("info.sav");
                        scr_tile_save("tile.sav");
                        scr_save_pro("pro.sav");
                        room_goto(room1);
                    }
                    else
                    {
                        global.next_player_room=room1;
                        obj_world.current_player_state=player_world_state.transition;
                    }
                }
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
            }
            //go to resume
            if(mouse_x&gt;41*7.8)&amp;&amp;(mouse_x&lt;98*7.8)&amp;&amp;(mouse_y&gt;y-41*7.8)&amp;&amp;(mouse_y&lt;y-14*7.8) 
            {
                destroy=1;
                player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                audio_sound_pitch(player_tap_sound,0.925);
                scr_options_save("options.sav");
            }
        }
        if global.getting_input=1
        {
        //music
            if music.start_up=0
            {
                if(mouse_x&gt;12*7.8)&amp;&amp;(mouse_x&lt;128*7.8)&amp;&amp;(mouse_y&gt;y-7.8*4)&amp;&amp;(mouse_y&lt;y+7.8*10)
                {
                    music.x=mouse_x;
                    global.vol_music=(((mouse_x/7.8)-12)/128)*0.5;
                    
                } 
            }
            //sfx
            if sfx.start_up=0
            {
                if(mouse_x&gt;12*7.8)&amp;&amp;(mouse_x&lt;128*7.8)&amp;&amp;(mouse_y&gt;y+7.8*23)&amp;&amp;(mouse_y&lt;y+7.8*35)
                {
                    sfx.x=mouse_x;
                    global.vol_fx=(((mouse_x/7.8)-12)/(128-12))*0.66;
                    if global.vol_fx&lt;0.05 global.vol_fx=0;
                    if !audio_is_playing(snd_player_tap)
                    {
                        player_tap_sound=audio_play_sound(snd_player_tap,5,false);
                        audio_sound_gain(player_tap_sound,global.vol_fx*0.6,0);
                        audio_sound_pitch(player_tap_sound,0.925);
                    }
                } 
            }
        }
    }
}
else
{
    if instance_exists(obj_overlay_test)obj_overlay_test.current_player_combat_state=obj_overlay_test.temp_player_state;
    music.destroy=1;
    sfx.destroy=1;
    help.destroy=1;
    swipe1.destroy=1;
    swipe2.destroy=1;
    swipe3.destroy=1;
    swipe4.destroy=1;
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var txt_col=$f4f4f4;
draw_set_font(font0_bigger);
draw_set_colour(txt_col);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text(x,y-30*7.8,"RESUME");

draw_set_halign(fa_center);
draw_set_valign(fa_top);
if room=arcade_mode draw_text(x-50*7.8,y-30*7.8,"RESET");


draw_set_halign(fa_center);
draw_set_valign(fa_top);
if room=arcade_mode draw_text(x+50*7.8,y-30*7.8,"EXIT");

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text(x,y-10*7.8,"MUSIC");

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text(x,y+14*7.8,"SFX");

if info=1
{
    if n+0&lt;164*7.8&amp;&amp;n+0&gt;25*7.8
    {
        if global.info_array[info_world,1]=1
        {
            draw_set_halign(fa_center);
            draw_set_valign(fa_top);
            draw_text(1080/2,n+0*7.8,global.info_array[info_world,0]);
        }
        else
        {
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
